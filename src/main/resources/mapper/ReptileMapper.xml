<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hodehtml.demo.dao.ReptileMapper" >
  <resultMap id="BaseResultMap" type="com.hodehtml.demo.model.Reptile" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="trade_no" property="tradeNo" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="VARCHAR" />
    <result column="grab_type" property="grabType" jdbcType="BIT" />
    <result column="risk_report_logo" property="riskReportLogo" jdbcType="BIT" />
    <result column="grab_data" property="grabData" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, trade_no, create_time, grab_type, risk_report_logo,grab_data
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from reptile
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from reptile
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.hodehtml.demo.model.Reptile" >
    insert into reptile (id, user_id, trade_no, 
      create_time, grab_type, risk_report_logo, 
      grab_data)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=VARCHAR}, #{tradeNo,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=VARCHAR}, #{grabType,jdbcType=BIT}, #{riskReportLogo,jdbcType=BIT},
      #{grabData,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hodehtml.demo.model.Reptile" >
    insert into reptile
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="tradeNo != null" >
        trade_no,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="grabType != null" >
        grab_type,
      </if>
      <if test="riskReportLogo != null" >
        risk_report_logo,
      </if>
      <if test="grabData != null" >
        grab_data,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="tradeNo != null" >
        #{tradeNo,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="grabType != null" >
        #{grabType,jdbcType=BIT},
      </if>
      <if test="riskReportLogo != null" >
        #{riskReportLogo,jdbcType=BIT},
      </if>
      <if test="grabData != null" >
        #{grabData,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hodehtml.demo.model.Reptile" >
    update reptile
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="tradeNo != null" >
        trade_no = #{tradeNo,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="grabType != null" >
        grab_type = #{grabType,jdbcType=BIT},
      </if>
      <if test="riskReportLogo != null" >
        risk_report_logo = #{riskReportLogo,jdbcType=BIT},
      </if>
      <if test="grabData != null" >
        grab_data = #{grabData,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.hodehtml.demo.model.Reptile" >
    update reptile
    set user_id = #{userId,jdbcType=VARCHAR},
      trade_no = #{tradeNo,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=VARCHAR},
      grab_type = #{grabType,jdbcType=BIT},
      risk_report_logo = #{riskReportLogo,jdbcType=BIT},
      grab_data = #{grabData,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hodehtml.demo.model.Reptile" >
    update reptile
    set user_id = #{userId,jdbcType=VARCHAR},
      trade_no = #{tradeNo,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=VARCHAR},
      grab_type = #{grabType,jdbcType=BIT},
      risk_report_logo = #{riskReportLogo,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>